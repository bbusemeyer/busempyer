import numpy as np 
import os
import shutil as sh
import subprocess as sub

def read_input(espinp):
  record = {}

  inpstr = ''
  for line in espinp:
    inpstr += line
  inplines = inpstr.split('\n')

  for lidx,line in enumerate(inplines):
    if '=' in line:
      spl = line.split()
      if len(spl) < 3: 
        # Should be "this = that" not this=that or this =that
        print("Warning: line not formatted right (%s)"%espinp)
      try:
        if '.' in spl[2]:
          record[spl[0]] = float(spl[2])
        else:
          record[spl[0]] = int(spl[2])
      except ValueError:
        record[spl[0]] = spl[2].replace("'","")

    if 'K_POINTS' in line:
      record['kpoint'] = map(int,inplines[lidx+1].split())

  return record

def gen_phonon(qpts,scfinp,outdir="outdir",bundle=True):
  scf = read_input(scfinp)
  fnames = []

  if bundle:
    ph_fname = scfinp.name.replace('pw','ph')
    outlines = [
      "Generated by gen_phonon",
      "&inputph",
      "  outdir = './outdir'",
      "  prefix = '%s'"%scf['prefix'],
      "  ldisp = .true.",
      "  qplot = .true.",
      "/",
      str(len(qpts))
    ]
    # The plus 1 is for weights, which aren't used with current settings.
    outlines += [' '.join(map(str,qpt))+' 1' for qpt in qpts]
    with open(ph_fname,'w') as outf:
      outf.write('\n'.join(outlines))
    fnames = [ph_fname]
  else:
    for qi in range(len(qpts)):
      ph_fname = scfinp.name.replace('pw','ph_%d'%qi)
      dirname = "ph_%d"%qi
      os.mkdir(dirname)
      sh.copytree(outdir,"/".join([dirname,outdir]))
      ph_fname = "/".join([dirname,ph_fname])
      fnames.append(ph_fname)
      outlines = [
        "Generated by gen_phonon",
        "&inputph",
        "  outdir = './outdir'",
        "  prefix = '%s'"%scf['prefix'],
        "/"
      ]  + [' '.join(map(str,qpts[qi]))]
      with open(ph_fname,'w') as outf:
        outf.write('\n'.join(outlines))

  return fnames

# Extract bands from espresso phonon matdyn.freq.
def get_phonon_bands(inpf):

  res = {}
  inplines = ''
  for line in inpf:
    inplines += line
  inp = inplines.split('\n')

  header = inp[0].split()
  res['nbands'] = int(header[2].replace(',',''))
  res['nqpts'] = int(header[4])

  qpts = [
    tuple(map(float,q.split())) for q in 
    [inp[2*i+1] for i in range((len(inp)-1)/2)]
  ]
  bands = [
    map(float,q.split()) for q in 
    [inp[2*i+2] for i in range((len(inp)-2)/2)]
  ]

  bands = np.array(bands).T.tolist()
  res['qpts'] = qpts
  res['bands'] = bands
  return res

def plot_phonon_bands(inpf):
  dat = get_phonon_bands(inpf)
  fig,ax = plt.subplots(1,1)
  for b in dat['bands']:
    ax.plot(b,'-')
  ax.set_xticklabels([str(q) for q in dat['qpts']])
  plt.show()

def postprocess_phonon(qpts,matdyn='matdyn'):
  outlines = [
    "&input",
    "  fildyn = '%s'"%matdyn,
    "  flfrc = '%s_rs'"%matdyn,
    "  zasr = 'no'",
    "/"
  ]
  with open("q2r.inp",'w') as outf:
    outf.write('\n'.join(outlines))

  sub.call("~/bin/q2r.x < q2r.inp > q2r.out",shell=True)

  outlines = [
    "&input",
    "  flfrc = '%s_rs'"%matdyn,
    "  asr = 'no'",
    "/",
    str(len(qpts))
  ]
  for qpt in qpts:
    outlines.append(' '.join(map(str,qpt)))
  with open("matdyn.inp",'w') as outf:
    outf.write('\n'.join(outlines))

  sub.call("~/bin/matdyn.x < matdyn.inp > matdyn.out",shell=True)
  
  return get_phonon_bands(open("matdyn.freq",'r'))
